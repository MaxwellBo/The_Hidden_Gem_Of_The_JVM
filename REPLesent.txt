| \gScala: The Hidden Gem of the JVM

---

\gJava

```
import java.util.Objects;

public class Person {
    public final String name;
    public final int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Person person = (Person) o;
        return age == person.age &&
                Objects.equals(name, person.name);
    }

    @Override
    public int hashCode() {

        return Objects.hash(name, age);
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}
```

---

\gScala


```
case class Person(name: String, age: Int)

val alice = Person("Alice", 18) // r
val bob   = Person("Bob", 18)
```

--
```
alice.age = 15
```
--

```
// immutable copy using structural sharing
val olderBob = bob.copy(age = 20)
println(bob)      // prints "Person(Bob, 18)"
println(olderBob) // prints "Person(Bob, 20)"

val parallelBob = Person("Bob", 18) // r

// Value equality by default
bob == parallelBob // true
```

---

StatementVisitor.java

```
public interface StatementVisitor {
    void visitBlockNode( StatementNode.BlockNode node );
    void visitStatementErrorNode( StatementNode.ErrorNode node );
    void visitStatementListNode( StatementNode.ListNode node );
    void visitAssignmentNode( StatementNode.AssignmentNode node);
    void visitWriteNode( StatementNode.WriteNode node);
    void visitCallNode( StatementNode.CallNode node);
    void visitIfNode( StatementNode.IfNode node);
    void visitWhileNode( StatementNode.WhileNode node);
}
```

---

\gStatementNode.java

```
public abstract class StatementNode {
    // ...
    public abstract void accept( StatementVisitor visitor );
    // ...
}

public static class BlockNode extends StatementNode {
    protected DeclNode.DeclListNode procedures;
    protected StatementNode body;
    protected Scope blockLocals;
    // ... garbage 
        @Override
        public void accept( StatementVisitor visitor ) {
            visitor.visitBlockNode( this );
        }
    // ... more garbage
}

// ... other implementing classes

```

---

\gStaticChecker.java

```
public class StaticChecker implements StatementVisitor {
    // ...
    
    public void visitBlockNode(BlockNode node) {
      // ...
    }

    // ...
}
```

---

\gScala

```
sealed trait StatementNode

case class BlockNode(
  procedures: DeclNode.DeclListNode,
  body: StatementNode,
  blockLocals: Scope
) extends StatementNode
// ... other implementing types

def staticChecker(statementNode: StatementNode) = {
  statementNode match {
    case BlockNode(procedures, body, blockLocals) => {
      // here we can use procedures, body, and blockLocals!
    }
  }
}
```
---

| \gPattern matching

```
val Pattern = "([a-cA-C])".r

//                  v never do this!
def matchExample(x: Any): String = {
  x match {
    case i: Int     => "Matched on type. Bound $i"
    case 1          => "Matched on a literal"
    case 2 | 3      => "Matched on union of literals"
    case x if 0 until 10 contains x => s"Matched with guard. Bound $x"
    case ab@(a, b)  => "Matched + destructure a tuple. Keep original tuple bound to ab"
    case x::xs      => s"Match + destructure a list. Bound head as $x, tail as $xs"
    case Pattern(c) => s"Extracted capture group $c. This will fail if the Regex doesn't match."
    case _          => "Matching wildcard"
  }
}
```

---

\gCar

```
class Car {
    private int wheels;
    private String color;

    public Car() {
      this.wheels = 4 // default
      this.color = "Red" // default

    }

    public String getColor() {
        return color;
    }

    public void setColor(final String color) {
        this.color = color;
    }

    public int getWheels() {
        return wheels;
    }

    public void setWheels(final int wheels) {
        this.wheels = wheels;
    }

    @Override
    public String toString() {
        return "Car [wheels = " + wheels + ", color = " + color + "]";
    }
}
```

---

```
class CarBuilder {
    private Car car;

    public CarBuilderImpl() {
        car = new Car();
    }

    public Car build() {
        return car;
    }

    public CarBuilder setColor(final String color) {
        car.setColor(color);
        return this;
    }

    public CarBuilder setWheels(final int wheels) {
        car.setWheels(wheels);
        return this;
    }
}
```
---

```
public class SomeClass {
    // ...
    public someMethod() {
        // ...
        return builder.setWheels(3)
                      .build();
        // ...
    }
    // ...
}

```

---

\gScala

```
case class Car(wheels: Int = 4, color: String = "Red")

val threeWheeledCar = Car(wheels = 3)
```

---

```
def addWithDefault(x: Int = 5, y: Int) = { x + y }

addWithDefault(y = 6)
```

---

\bList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 3, 5));

\bList<String> strings = xs.stream().map(x -> Integer.toString(x)).collect(Collectors.toList()));

--

```
val numbers = List(1, 3, 5)

val strings = numbers.map(x => x.toString)

--

val biggerNumbers = numbers.map(n => n * 2)
val biggerNumbers2 = numbers.map(_ * 2)
// List(2, 6, 10)

--

// Value equality for collection types too!
numbers == List(1, 3, 5) // true
numbers == (1 to 5 by 2) // true
```

---

```
// type alias
type WorldId = String

// case classes generate hashCode() method automatically
// which allows you to use them in HashMaps!
val tracker: Map[Person, WorldId] = Map(
  alice       -> "42",
  bob         -> "42",
  parallelBob -> "1",
)
```
--

```
tracker.get(alice) // Some("42")
```
--

```
tracker.get(Person("Tom", 12)) // None
```
--
```
// Find the sum of the ages of everyone from world 42
tracker
  .filter { case (person, world) => world == "42" }
  .map { case (person, world) => person.age }
  .reduce(_ + _)
// 18
```
---

```
// Scala's Option is used to represent nullability
def parseInt(str: String): Option[Int] = Try(str.toInt).toPtion
```
--

```
parseInt("1") // Some(1)
parseInt("nope") // None
```
--

```
def parseAndPlus(str: String): String = {
  parseInt(str) match {
    case Some(num) => s"$num plus one is ${num + 1}"
    case None => "Not a number!"
  }
}
```
--

```
parseAndPlus("3")   // "3 plus one is 4"
parseAndPlus("x")   // "Not a number!"
```

---
| \gExample - Using Java APIs

```
// Option.apply will handle nulls for us
Option(mightReturnNull()) match {
  case Some(i) => print(i)
  case None => println("is null")
}
```

---

```
import java.time

val now = java.time.LocalDateTime.now()
```

---

```
import scala.collection.JavaConverters._

// someJavaMethod takes java.util.List
// and returns java.util.Map
val javaMap = someJavaMethod(scalaList.asJava)
val scalaMap = javaMap.asScala
```

---

```
try {
  val date = java.time.LocalDate.parse(input)
  Right(date.getYear)
} catch {
  case e: java.time.format.DateTimeParseException => Left(e)
}
```
---

```
import scala.util.{Try, Success, Failure}

def divideStrings(e: String, o: String): Try[Int] = {
  for {
    dividend <- Try(e.toInt)
    divisor <- Try(o.toInt)
    answer <- Try(dividend / divisor)
  } yield answer
}
```

---


| \gAsync & Parallel

```
import monix.eval.Task
import monix.execution.Scheduler.Implicits.global
import scala.util.Random

// Convert a side effecting function into a task
val t: Task[Int] = Task {
  val seconds = Random.nextInt(4) + 1
  println(s"Waiting for ${seconds}s")
  Thread.sleep(seconds * 1000)
  seconds
}
```
---

```
import scala.concurrent.duration._
import scala.concurrent.Await

// Manipulate Tasks as if they are values
val tasks: List[Task[Int]] = List(t, t, t)

// Bind all tasks together, so that we can run them in parallel later on
val grouped: Task[List[Int]] = Task.gather(tasks)

// Do stuff with our parallel tasks, that haven't even executed yet
val incremented = grouped.map(times => times.map(_ * 100))
```

--

```
// Run our task at the boundary of our program
val result = Await.result(incremented.runAsync, 10.seconds)
```

---

```
def addRandom(x: Int): Task[Int] = Task {
  val seconds = Random.nextInt(4) + 1
  println(s"Waiting for ${seconds}s")
  Thread.sleep(x + seconds * 1000)
  seconds
}

val seq = for {
  a <- addRandom(1)
  b <- addRandom(a)
  c <- addRandom(b)
} yield c

val result = Await.result(seq.runAsync, 20.seconds)
```

---

| \gImplicits
--

```
case class Context(userId: String)

def fetchUserName()(implicit ctx: Context): Task[UserInfo] = {
  httpGet(s"www.user.com?user_id=${ctx.userId}")
}
```
--
```
// Usage:
implicit val myContext = Context("some-user-id")

fetchUserName()
// no need to pass the context explicitly. It is implicitly passed in
```
--
```
fetchUserName()(Context("another-user-id"))
```
---

| \gGoing Functional

```
// Summarise these balance books!
val balance1 = Map("John" -> 5, "Mary" -> 10)
val balance2 = Map("John" -> 5, "Mary" -> 10, "Bob" -> 3)
```

--
```
import cats.implicits._
import cats.kernel.Monoid

// Map[A, B] is a monoid if B is a monoid
balance1 |+| balance2

// Map(John -> 10, Mary -> 20, Bob -> 3)
```
--
```
val balanceBooks = List(balance1, balance2, balance3)

val result = balanceBooks.fold
// combine all our balance books into one
```
---
| \gJSON

```
import io.circe._
import io.circe.generic.semiauto._

case class Person(name: String, age: Int)
object Person {
  implicit val encoder: Encoder[Person] = deriveEncoder[Person]
  implicit val decoder: Decoder[Person] = deriveDecoder[Person]
}
```
--
```
// Encoding
Person("Alice", 20).asJson.noSpaces
// {"name":"Alice","age":20}
```
--

```
decode[Person]("""{"name": "Alice", "age": 20}""")
// Right(Person(Alice, 20))

decode[Person]("""{"name": 5}""")
// Left(DecodingFailure(String, List(DownField(name))))
```

---
| \gJSON (2)

```
decodeAccumulating[Person]("""{"name": 0}""")
//Invalid(NonEmptyList(
//  DecodingFailure(String, List(DownField(name))),
//  DecodingFailure(Field not found, List(DownField(age)))
//))
```
--

```
// Encoding & Decode complex structures
val jsonObj = Map(
  "1" -> Person("Alice", 20),
  "2" -> Person("Bob", 20)
).asJson.noSpaces
// {"1":{"name":"Alice","age":20},"2":{"name":"Bob","age":20}}
```
--

```
decode[Map[String, Person]](jsonObj)
// Right(Map("1" -> Person("Alice",20), "2" -> Person("Bob",20)))
```

---

| Static typing is to a good programmer what a spell checker is to a
|  good writer. -- Peter Van Roy

---

We would never do this

```
def add(a: Any, b: Any) = ???
```
--

or would we? :wink:

```
def add(a, b):
    "Adding two values the Python way"
    return a + b
```
---
| \g Static Typing

We have chosen a typed language that enforces some restrictions at
compile time


```
def add(a: Int, b: Int): Int = a + b

val foo: String = "foo"

add(foo, 2)
```
---

I think we can all agree that this is a sane thing to do

But can we do better?

---
| \g Almost Good Enough

We have all seen code like this

```
case class Point(latitude: Double, longitude: Double)
```

which superficially seems good enough until

```
val lat = 42.0
val lng = -10.0

val point = Point(lng, lat)
def fireNukeAt(point: Point): Unit == ???
```
--

The compiler can't help us in this case :weary:
---
| \g Value Classes

There is a standard pattern to solve this issue and ensure values go to the right
positions

```
case class Lat(lat: Double) extends AnyVal

case class Lng(lng: Double) extends AnyVal

case class Point(lat: Lat, lng: Lng)

val point= Point(Lng(42.0), Lat(-10.0))
```

Slightly more effort declaring a few types ensures silly mistakes
won't happen. 

And thanks to \rAnyVal\s there's no runtime overhead :+1:
---
| \g Detour: A Tale About Greyhounds

```
class Greyhound {
 
  def run: Greyhound = {
    println("Running, running, running!")
    new Greyhound
  }
 
  def sleep: Greyhound = {
    println("Zzzz ...")
    new Greyhound
  }
}
```

Business rules:

1) After running, a Greyhound is exhausted

2) An exhausted Greyhound needs to sleep before she can run again

---
| \gPhantom Types

Phantom types are never instantiated

```
object Greyhound {
 
  sealed trait State
  object State {
    sealed trait Rested extends State
    sealed trait Exhausted extends State
  }
}
```
---
| \gGreyhounds are Lazy

```
class Greyhound[S <: Greyhound.State] {
  import Greyhound._
  def run(implicit ev: S =:= State.Rested): Greyhound[State.Exhausted] = {
    println("Running, running, running!")
    new Greyhound
  }
 
  def sleep: Greyhound[State.Rested] = {
    println("Zzzz ...")
    new Greyhound
  }
}

object Greyhound {
 
  sealed trait State
  object State {
    sealed trait Rested extends State
    sealed trait Exhausted extends State
  }
  def rested: Greyhound[State.Rested] = new Greyhound
  def exhausted: Greyhound[State.Exhausted] = new Greyhound
}
```
---
| \g Kinds

Let's stop here for a moment and reflect

What is

```
// Value level function of type Int => Int
def foo(a: Int): Int 

// Type level function of kind * => *
type Result[A] = Either[String, A] 

// Higher order function of type (Int => Int) => Int
def apply(f: Int => Int): Int 

// Higher kinded type (2nd order) of kind (* => *) => *
trait Functor[F[_]]
```

Context-independent type-level functions (limited to induction via
recursion, no value level transformation, no type equivalence testing,
i.e. no branching, etc.)

Type classes are type-level functions with context (messy but more
powerful)
---

| \g Phantom Types as Type Tags

Now that we've introduced Phantom Types, we can look at another use
case: Unboxed type tags

* type Tagged[A, B] = A with B
* Tagged[A,B] is subtype of A
* This is an alternative to defining value classes

```
type Tagged[A, T] = A with T
type @@[T, Tag] = Tagged[T, Tag]

def tag[U] = new Aux[U]
	    
class Aux[U] {
  def apply[T](t : T) : T @@ U = t.asInstanceOf[T @@ U]
}
```
---
| \gQuantities and Things

With this lightweight implementation of type tags, we can now
implement some poor mans phyisical quantities and do calculations on
them

```
trait Meter
trait Second
trait MetersPerSecond

def Meter(a: Double): Double @@ Meter = tag[Meter](a)
def Second(a: Double): Double @@ Second = tag[Second](a)
def MetersPerSecond(a: Double): Double @@ MetersPerSecond = tag[MetersPerSecond](a)

def velocity(
  d: Double @@ Meter, 
  t: Double @@ Second
): Double @@ MetersPerSecond = MetersPerSecond(d / t)
```
--

For a more elaborate example of representing quantities, their units
of measure, and their dimensional relationship check out the
exceptional \rSquants\s library.

---
| \gIt's Just a String

```
class EmailAddress(email: String)
```

or is it?
--

<addr-spec>     ::= <user-name> "@" <domain> ["." <domain>]+ 
<user-name>     ::= ...
<domain>        ::= ...

```
val regex =   """^[_A-Za-z0-9-\+]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$""".r
```
 
---
| \gContextual

Small Scala library for defining: 

  * string interpolators— prefixed string literals which determine how
  they are interpreted at compile-time
 
  * custom checks and compile errors

while only writing ordinary "user" code :muscle:

```
val email: EmailAddress = email"max@maxbo.me"
```

---
| \gContextual String Interpolators

```
case class EmailAddress(address: String)

private val validEmail: Regex =
  """^[_A-Za-z0-9-\+]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$""".r

object EmailParser extends Interpolator {

  type Output = EmailAddress

  def contextualize(interpolation: StaticInterpolation): Seq[ContextType] = {
    
    interpolation.parts.foreach {
      case lit@Literal(_, string) =>
        if(validEmail.findFirstMatchIn(string).isEmpty)
          interpolation.abort(lit, 0, "this is not a valid email address")
    
      case hole@Hole(_, _) =>
        interpolation.abort(hole, "substitutions are not supported")
    }

    Nil
  }

  def evaluate(contextual: RuntimeInterpolation): EmailAddress =
    EmailAddress(contextual.parts.mkString)

}

implicit class EmailStringContext(sc: StringContext) { val email = Prefix(EmailParser, sc) }

```

---
| \gType Refinements

Let's revisit the earlier Lat/Lng example

```
case class Lat(lat: Double) extends AnyVal

case class Lng(lng: Double) extends AnyVal
```
--

Additional constraints:

* The valid range for a latitude is [-90.0, 90.0]

* The valid range for longitude is [-180.0, 180.0]

Can we express these constraint in the Scala type system?

---
| \g Refined Lat/Lng types

Now we can rewrite our Lat/Lng types

```
case class Lat(
  lat: Double Refined Interval.Closed[W.`-90.0`.T,W.`90.0`.T]
)

case class Lng(
  lng: Double Refined Interval.Closed[W.`-180.0`.T, W.`180.0`.T]
)
```
---
| \gRefined

Scala library for refining types with type-level predicates which
constrain the set of values described by the refined type

Predicates combine

Predicates follow a subtyping relationship

---
| \gRefined Predicates

Refined has predefined predicates for

* Booleans

* Collections

* Strings

* Numericals

* More

Numeric predicates:

* Less[N]: checks if a numeric value is less than N

* LessEqual[N]: checks if a numeric value is less than or equal to N

* Greater[N]: checks if a numeric value is greater than N

* GreaterEqual[N]: checks if a numeric value is greater than or equal to N

* Positive: checks if a numeric value is greater than zero

* NonPositive: checks if a numeric value is zero or negative

* Negative: checks if a numeric value is less than zero

* NonNegative: checks if a numeric value is zero or positive

* Interval.Open[L, H]: checks if a numeric value is in the interval (L, H)

* Interval.OpenClosed[L, H]: checks if a numeric value is in the interval (L, H]

* Interval.ClosedOpen[L, H]: checks if a numeric value is in the interval [L, H)

* Interval.Closed[L, H]: checks if a numeric value is in the interval[L, H]

---

```
val refines: Int Refined Positive = 5

// If the value does not satisfy the predicate, we get a meaningful
// compile error:
val doesntRefine: Int Refined Positive = -5
// error: Predicate failed: (-5 > 0).
//  val doesntRefine: Int Refined Positive = -5
//                                           ^

```

---
| \g Subtyping

```
val a: Int Refined Greater[W.`5`.T] = 10
// a: Int Refined Greater[Int(5)] = 10

// Since every value greater than 5 is also greater than 4, `a` can be
// ascribed the type Int Refined Greater[W.`4`.T]:
val b: Int Refined Greater[W.`4`.T] = a
// b: Int Refined Greater[Int(4)] = 10

// An unsound ascription leads to a compile error:
val c: Int Refined Greater[W.`6`.T] = a
// error: type mismatch (invalid inference):
//  Greater[Int(5)] does not imply
//  Greater[Int(6)]
//        val c: Int Refined Greater[W.`6`.T] = a
```


---
| \g Runtime Values for Refined Types

Of course, most of our data is not hardcoded, but comes from external
sources. 

If you try to define a single variable and pass it to refine, it will
complain at compile time about a type mismatch. 

How do we solve this?

Refined itself provides the solution by allowing us to use the same
refined types we defined for validation

```
val userPositive: Either[String, Int Refined Positive] = refineV(userInput)
// userPositive: Either[String, Int] = Right(55)
```

```
type NonEmptyString = String Refined NonEmpty

abstract class FirstName private (name: NonEmptyString) 

object FirstName {
  def validated(s: String)(implicit ev: Validate[String, NonEmpty]): Either[String, FirstName] = 
    refineV[NonEmpty](s).map(new FirstName(_) {})
}
```
 
---
| \g Pure Config

Let's assume you have the following \rapplication.conf\s:

```
val conf = parseString("""{
  server.interface="0.0.0.0"
  server.port=8080
}""")

```

Using \rPureConfig\s loading the config file is trivial

```
import pureconfig.loadConfig

case class Server(interface: Int, port: Int)
case class Settings(server: Server)

val config: Settings = loadConfig[Settings](conf) match {
  case Right(c) => c
  case Left(ex) =>
    println(s"Error loading configuration: $ex.\nProgram will now exit.")
    throw new Exception(ex.toString)
}
```
---
| \g PureConfig and Refined Types


But some changes, although wrong, will go unnoticed:

```
val conf = parseString("""{
  server.interface="0.0.0.0"
  server.port=808
}""")

```

We can catch those errors by using refined with PureConfig:

```
import pureconfig.loadConfig
import eu.timepit.refined.pureconfig._


type NonEmptyString = String Refined NonEmpty
type ServerPort     = Int Refined Greater[W.`1024`.T]

case class Server(interface: NonEmptyString, port: ServerPort)
case class Settings(server: Server)

val config: Settings = loadConfig[Settings](conf) match {
  case Right(c) => c
  case Left(ex) =>
    println(s"Error loading configuration: $ex.\nProgram will now exit.")
    throw new Exception(ex.toString)
}  
```

---
| \gDatabase Integration


Assume we have the following model

```
type NonEmptyString = String Refined NonEmpty

case class FirstName(name: NonEmptyString) extends AnyVal

case class LastName(name: NonEmptyString) extends AnyVal

case class Person(firstName: FirstName, lastName: LastName)
```

We can now simply run the following query in Doobie to build our case
class:

```
def getAllPersons[M[_]](xa: Transactor[M]) =
    sql"SELECT firstName, lastName FROM Person"
      .query[Person]
      .process
      .list
      .transact(xa)
```

---
| \gRecap

* We can define models that, by virtue of their types, make it
  impossible to have invalid states like a Person without a name or a
  Latitude of -200.0 degrees. We know that when we send data to
  another service, or render the details on a website, that the values
  will be present and within their specifications.

* We can use refinement types to implement strongly typed
  configuration avoiding common pitfalls like typos, bad selection of
  ports, etc.

* We enforce, at compile time, that all the data that is used to
  generate our internal model has been validated. 

* As our model disallows invalid states, we can assume that all the
  data in a database is compliant

I hope I could show that we can utlise Scala's type system to bring
the benefits of type safety, finding errors at compile time, and
banish invalid state from models, configuration, and database -
No diminishing returns and minimal boilerplate on top, 

---
| \g Where do I start? - Libs

* Cats (functional programming abstractions) -
  https://typelevel.org/cats/

* FS2 (functional streams for Scala) -
  https://github.com/functional-streams-for-scala/fs2

* Doobie (pure functional jdbc layer) -
  https://github.com/tpolecat/doobie

* Circe (JSON) -
  https://circe.github.io/circe/

* Monix (Lazy Parallel Async) -
  https://monix.io/

* Squants (quantities, units of measure, dimensions) - 
  https://github.com/typelevel/squants

* Refined (type refinements) - https://github.com/fthomas/refined

* Shapeless (type tags and lots of other goodies) -
  https://github.com/milessabin/shapeless

* Contextual (compile time string interpolation) -
  https://github.com/propensive/contextual

* PureConfig (sane config wrapper for typesafe config) -
  https://github.com/pureconfig/pureconfig


---
```
import cats.effect.{IO, Sync}
import fs2.{io, text}
import java.nio.file.Paths

def fahrenheitToCelsius(f: Double): Double =
  (f - 32.0) * (5.0/9.0)

def converter[F[_]](implicit F: Sync[F]): F[Unit] =
  io.file.readAll[F](Paths.get("testdata/fahrenheit.txt"), 4096)
    .through(text.utf8Decode)
    .through(text.lines)
    .filter(s => !s.trim.isEmpty && !s.startsWith("//"))
    .map(line => fahrenheitToCelsius(line.toDouble).toString)
    .intersperse("\n")
    .through(text.utf8Encode)
    .through(io.file.writeAll(Paths.get("testdata/celsius.txt")))
    .compile.drain

// at the end of the universe...
val u: Unit = converter[IO].unsafeRunSync()
```
---

```
sql"select code, name, population, gnp from country"
  .query[(String, String, Int, Option[Double])]
  .stream
  .take(5)
  .quick
  .unsafeRunSync

// (AFG,Afghanistan,22720000,Some(5976.0))
// (NLD,Netherlands,15864000,Some(371362.0))
// (ANT,Netherlands Antilles,217000,Some(1941.0))
// (ALB,Albania,3401200,Some(3205.0))
// (DZA,Algeria,31471000,Some(49982.0))
```

---

```
sql"select name from country"
  .query[String]    // Query0[String]
  .stream           // Stream[ConnectionIO, String]
  .take(5)          // Stream[ConnectionIO, String]
  .compile.toList   // ConnectionIO[List[String]]
  .transact(xa)     // IO[List[String]]
  .unsafeRunSync    // List[String]
  .foreach(println) // Unit

// Afghanistan
// Netherlands
// Netherlands Antilles
// Albania
// Algeria
```
---

```
CREATE TABLE country (
  code        character(3)  NOT NULL,
  name        text          NOT NULL,
  population  integer NOT NULL,
  gnp         numeric(10,2),
  indepyear   smallint
  -- more columns, but we won't use them here
)
```

```
case class Country(code: Int, name: String, pop: Int, gnp: Double)
```

```
def biggerThan(minPop: Short) =
  sql"""
    select code, name, population, gnp, indepyear
    from country
    where population > $minPop
  """.query[Country]
```
---
```
biggerThan(0).check.unsafeRunSync

      select code, name, population, gnp, indepyear
      from country
      where population > ?
    

  ✓ SQL Compiles and Typechecks
  ✕ P01 Short  →  INTEGER (int4)
    - Short is not coercible to INTEGER (int4) according to the JDBC specification.
      Fix this by changing the schema type to SMALLINT, or the Scala type to Int or
      JdbcType.
  ✕ C01 code       CHAR     (bpchar)  NOT NULL  →  Int
    - CHAR (bpchar) is ostensibly coercible to Int according to the JDBC specification
      but is not a recommended target type. Fix this by changing the schema type to
      INTEGER; or the Scala type to Code or String.
  ✓ C02 name       VARCHAR  (varchar) NOT NULL  →  String
  ✓ C03 population INTEGER  (int4)    NOT NULL  →  Int
  ✕ C04 gnp        NUMERIC  (numeric) NULL      →  Double
    - NUMERIC (numeric) is ostensibly coercible to Double according to the JDBC
      specification but is not a recommended target type. Fix this by changing the
      schema type to FLOAT or DOUBLE; or the Scala type to BigDecimal or BigDecimal.
    - Reading a NULL value into Double will result in a runtime failure. Fix this by
      making the schema type NOT NULL or by changing the Scala type to Option[Double]
  ✕ C05 indepyear  SMALLINT (int2)    NULL      →  
    - Column is unused. Remove it from the SELECT statement.
```

---

| \gScala Criticisms

---

- Slow compile times?
  + Near-realtime feedback in IDE (IntelliJ)
  + Use incremental compile & hot JVM (`~compile` in SBT)
  + Continuous improvements in compilation speed

--

- Implicits are hard to find/debug?
  + Requires discipline & established convention
  + Put them in canonical place: the companion object

---

* Advanced FP is cumbersome / I want my zygohistomorphic prepromorphisms
--
    * e.g. subtyping interferes with type inference or unification
--
    * Mixing OO and FP is hard
    * Gets easier as tools & compiler improve
--
    * Free Monads / Extensible Effects / Recursion Schemes all have
      well documented & battle-tested implementations

---
| \gMaking Scala work for your team
--

- Code reviews
--

- Choose your code convention and libraries based on your team's capabilitie and goals
--

-  Start small, slow down & share knowledge
--

-  Try new things, but keep it simple

---
| \gMy personal experience

- Friendly & helpful community with lots of well maintained/documented projects
--

- Awesome roadmap & transparent development of Scala compiler & friends
--

- Less time avoiding/fixing bugs == more time solving the actual problem!
---

| \gWhere do I start? - Resources

- Scala for the Impatient or Programming in Scala (The Red Book)
- https://docs.scala-lang.org/tour/tour-of-scala.html
- https://scastie.scala-lang.org (REPL)
- https://www.scala-exercises.org
- https://gitter.im/scala/scala for help & discussions

---

| \gWhere do I start? - Tooling

- sbt (Scala Build Tool) 
  + `brew install sbt`
  + `sbt new gvolpe/typelevel-stack.g8`
- Ammonite REPL
  + `brew install ammonite-repl`
  + `amm --watch --predef <FILE>`
- IntelliJ Scala plugin

---

| \gWhy Scala - Language

- Powerful & flexible type system
  + Allows very different styles of programming
  + Smooth transition from imperative to functional style

--
- Lean Standard Lib
  + Immutable by default, mutable when required
  + Common data structures & utilities
  + Async primitives (Future)

---

| \gWhy Scala - Platform

- Java Virtual Machine (JVM)
  + One of the best VMs in terms of performance and stability
  + Great ecosystem for monitoring, debugging, packaging, IDE integration, testing, security
--
- Javascript via Scala.js
    + Full Scala except advanced reflection
--
* Native via Scala Native
    * Fast startup & better control over memory

---

| \gWhy Scala - Ecosystem

- Use Scala / Java / Kotlin libraries
  + Great libraries for backend development
  + First-class client libraries for most domains
--
- In Scala ecosystem itself
  + Libraries that embraces immutability, referential transparency, and lack of reflection
  + Fluid Domain Specific Languages enabled by Scala language features
--
- Contributions from Twitter, Stripe, REA Group, etc

---
|  \gConclusion

- Scala is a production-ready language with amazing ecosystem, tools and community
--

--

* Come join us!

---

